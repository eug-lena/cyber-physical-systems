# Copyright (C) 2024 Christian Berger, Ionel Pop, Adrian Hassa,
#                        Teodora Portase, Vasilena Karaivanova
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner
image: docker:25

# Details about how to connect to the Docker service to run this build.
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

services:
  - name: docker:25-dind

stages:
  # - build
  - deploy
  - compare

# Display information before we start the build.
before_script:
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# # This section describes what shall be done to build and test the project.
# build-and-test:
#   # Do not include releases (tags) in the build-and-test step
#   except:
#     - tags
#   tags:
#     - docker-build
#   stage: build
#   script:
#     - docker build . --output . --target temp
#   artifacts:
#     name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
#     expire_in: 2 months
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: coverage.xml
#   coverage: '/.*lines:\s+(\d+.\d\%)/'

# This section describes what shall be done to deploy artifacts from the project.
release:
  only:
    # Regex taken from: https://semver.org/
    - /^v{1}(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  tags:
    - docker-build
  stage: deploy
  # Some parts of these sections were taken from https://gitlab.com/gitlab-org/gitlab-foss/-/issues/41488
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - wget -O ~/.docker/cli-plugins/docker-buildx $BUILDX_URL
    - chmod 755 ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use --driver docker-container --name $BUILDX_BUILDER --platform=${BUILDX_PLATFORM}
    - docker buildx inspect --bootstrap ${BUILDX_BUILDER}
    - docker buildx ls df -h
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    # Build the Docker image and push it to the GitLab registry
    # From assignment 8
    # - docker build -f Dockerfile -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" .
    # - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG"
    - docker buildx build --platform $BUILDX_PLATFORM -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" --push .
  # Run only when build-and-test is successful
  # dependencies:
  #   - build-and-test
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_CLI_EXPERIMENTAL: enabled
    BUILDX_URL: https://github.com/docker/buildx/releases/download/v0.7.1/buildx-v0.7.1.linux-amd64
    BUILDX_BUILDER: platformbuilder
    BUILDX_PLATFORM: linux/amd64,linux/arm/v7

compare:
  image: ubuntu:latest
  services:
    - docker:stable-dind
  tags:
    - docker-build
  stage: compare
  # needs:
  #   - job: build-and-test
  before_script:
    - apt-get update
    - apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    - echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update
    - apt-get install -y docker-ce docker-ce-cli containerd.io
  script:
    # Building previous and current images
    - echo 'Building images ...'
    - ls
    # - docker build -t current-image:latest -f Dockerfile .
    # - git checkout $CI_COMMIT_BRANCH && git pull
    # - git reset --hard HEAD~1
    # - docker build -t previous-image:latest -f Dockerfile .
    # - git pull
    # # Cloning the h264 repo
    # - git clone https://github.com/chalmers-revere/opendlv-video-h264-replay.git
    # - cd opendlv-video-h264-replay
    # - docker build -t h264:latest -f Dockerfile .
    # - cd ..
    # # Installing docker compose
    # - curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    # - chmod +x /usr/local/bin/docker-compose
    # - cd recordings
    # # Iterating through the videos to compare
    # - |-
    #   for i in {1..5}
    #   do
    #     echo "Analyzing video ${i} ..." 
    #     ALGO_VERSION="current-image:latest" VIDEO=${i} docker-compose -f docker-compose.yaml up --no-log-prefix --abort-on-container-exit
    #     ALGO_VERSION="previous-image:latest" VIDEO=${i} docker-compose -f docker-compose.yaml up --no-log-prefix --abort-on-container-exit
    #   done
    # # Todo - add the comparison of the two videos